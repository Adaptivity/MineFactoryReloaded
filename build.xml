<project name="MineFactoryReloaded" default="install" basedir=".">
	<property environment="env"/>
	
	<!-- Basic directories -->
	<property name="src.dir" value="src"/>
	<property name="build.dir" value="build"/>
	<property name="resources.dir" value="resources"/>
	<property name="download.dir" value="${build.dir}/downloads"/>
	
	<!-- Project information -->
	<property name="build.name" value="${ant.project.name}"/>
	<property name="class.pckg" value="powercrystals/minefactoryreloaded"/>
	<!-- Version file (main class) -->
	<property name="verclass.dir" value="${src.dir}/${class.pckg}" />
	<property name="verclass.name" value="MineFactoryReloadedCore.java"/>
	
	<!-- Forge version -->
	<property name="mc.version" value="1.7.2"/>
	<property name="forge.major" value="10"/>
	<property name="forge.minor" value="12"/>
	<property name="forge.patch" value="0"/>
	<property name="forge.build" value="1055"/>
	
	<!-- Packaging -->
	<property name="dist.dir" value="${build.dir}/dist"/>
	<property name="classes.dir" value="${build.dir}/packaging"/>
	<property name="apiclasses.dir" value="${build.dir}/api-packaging"/>
	
	<!-- Forge paths -->
	<property name="forge.version" value="${mc.version}-${forge.major}.${forge.minor}.${forge.patch}.${forge.build}"/>
	<property name="forge.dir" value="${build.dir}/forge"/>
	<property name="forgebuild.dir" value="${forge.dir}/build"/>
	<property name="compile.dir" value="${forgebuild.dir}/tmp/compile"/>
	<property name="lib.dir" value="${forgebuild.dir}/libs"/>
	<property name="sources.dir" value="${forgebuild.dir}/sources/minecraft"/>
	<property name="transformers.dir" value="${forge.dir}/src/main/resources/"/>
	<property name="forge.jar" value="${build.dir}/.gradle/caches/minecraft/net/minecraftforge/forge/${forge.version}/forgeSrc-${forge.version}.jar"/>
	<property name="reobf.jar" value="${lib.dir}/modid-1.0.jar"/>
	<property name="forge.url" value="http://files.minecraftforge.net/maven/net/minecraftforge/forge/${forge.version}/forge-${forge.version}-src.zip"/>
	
	<!-- Enforce some paths -->
	<mkdir dir="${build.dir}"/>
	<mkdir dir="${download.dir}"/>
	
	<!-- Classpaths -->
	<path id="mcp.classpath">
		<pathelement location="${forge.jar}"/>
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
			<include name="**/*.jar"/>
			<exclude name="${reobf.jar}"/>
		</fileset>
		<fileset dir="${build.dir}/.gradle/caches">
			<include name="modules*/files*/**/*.jar"/>
			<exclude name="modules*/files*/commons-io/commons-io/1.4/**/*.jar"/>
		</fileset>
	</path>
	<path id="gson">
		<fileset dir="${build.dir}/.gradle/caches">
			<include name="modules*/files*/com.google.code.gson/**/*.jar"/>
		</fileset>
	</path>
	
	<!-- Task skipping -->
	<target name="properties">
		<available property="has.api" file="${src.dir}/${class.pckg}/api"/>
		<available property="already.compiled" file="${reobf.jar}"/>
		<available property="forge.exists" file="${download.dir}/forge-${forge.version}-src.zip"/>
		<condition property="forge.already.installed">
			<available file="${forge.jar}" type="file"/>
		</condition>
		<available property="den-exists" file="${build.dir}/MFR-Forestry/build.xml"/>
		<condition property="should-download-jgit">
			<and>
				<available file="${download.dir}/jgit/jgit-ant.jar"/>
				<available file="${download.dir}/jgit/jgit.jar"/>
				<available file="${download.dir}/jgit/jsch.jar"/>
			</and>
		</condition>
		<condition property="have.libs">
			<and>
				<available file="${lib.dir}/codechickenlib.jar" type="file"/>
				<available file="${lib.dir}/CoFHLib.jar" type="file"/>
				<available file="${lib.dir}/CoFHCore.jar" type="file"/>
				<available file="${lib.dir}/Buildcraft.jar" type="file"/>
				<available file="${lib.dir}/industrialcraft-2-api.jar" type="file"/>
			</and>
		</condition>
	</target>
	
	<!-- Dependency downloading -->

	<target name="download-core" depends="properties" unless="forge.exists">
		<echo message="Downloading CoFHCore... "/>
		<get src="https://github.com/CoFH/CoFHCore/archive/master.zip" dest="${download.dir}/CoFHCore.zip"/>
		<delete dir="CoFHCore-master" failonerror="false"/>
		<unzip src="${download.dir}/CoFHCore.zip" dest="${download.dir}"/>
	</target>

	<target name="get-dependencies" unless="have.libs">
		<echo message="Downloading CCL..."/>
		<get src="http://files.minecraftforge.net/maven/codechicken/CodeChickenLib/1.7.2-1.1.0.73/CodeChickenLib-1.7.2-1.1.0.73-dev.jar" dest="${download.dir}/codechickenlib.jar"/>

		<echo message="Downloading IC2 API... "/>
		<get src="http://ic2api.player.to:8080/job/IC2_experimental/477/artifact/build/libs/industrialcraft-2-2.1.477-experimental-api.jar" dest="${download.dir}/industrialcraft-2-api.jar"/>

		<echo message="Downloading Buildcraft API.. "/>
		<get src="https://github.com/BuildCraft/BuildCraft/archive/master.zip" dest="${download.dir}/Buildcraft.zip"/>
		<!-- Begin hack -->
		<unzip src="${download.dir}/Buildcraft.zip" dest="${download.dir}"/>
		<delete dir="${compile.dir}" failonerror="false"/>
		<mkdir dir="${compile.dir}"/>
		<javac srcdir="${download.dir}/BuildCraft-master/api/" destdir="${compile.dir}"
			target="1.6" source="1.6"
			classpathref="mcp.classpath" debug="true" debuglevel="lines,source" includeAntRuntime="false">
			<include name="buildcraft/api/**/*.java"/>
		</javac>
		<jar destfile="${download.dir}/Buildcraft.jar" compress="true" level="9" basedir="${compile.dir}"/>
		<delete dir="${compile.dir}" failonerror="false"/>
		<delete dir="BuildCraft-master"/>
		<!-- End hack -->

		<echo message="Downloading CoFHLib... "/>
		<get src="https://github.com/CoFH/CoFHLib/archive/master.zip" dest="${download.dir}/CoFHLib.zip"/>
		<!-- Begin hack -->
		<unzip src="${download.dir}/CoFHLib.zip" dest="${download.dir}"/>
		<delete dir="${compile.dir}" failonerror="false"/>
		<mkdir dir="${compile.dir}"/>
		<javac srcdir="${download.dir}/CoFHLib-master/src/main/java" destdir="${compile.dir}"
			target="1.6" source="1.6"
			classpathref="mcp.classpath" debug="true" debuglevel="lines,source" includeAntRuntime="false">
			<include name="**/*.java"/>
		      <classpath>
				<fileset file="${download.dir}/codechickenlib.jar"/>
		      </classpath>
		</javac>
		<jar destfile="${download.dir}/CoFHLib.jar" compress="true" level="9" basedir="${compile.dir}"/>
		<delete dir="${compile.dir}" failonerror="false"/>
		<delete dir="CoFHLib-master"/>
		<!-- End hack -->
		<echo message="Compiling CoFHCore... "/>
		<!-- Begin hack -->
		<delete dir="${compile.dir}" failonerror="false"/>
		<mkdir dir="${compile.dir}"/>
		<javac srcdir="${download.dir}/CoFHCore-master/src/main/java" destdir="${compile.dir}"
			target="1.6" source="1.6"
			classpathref="mcp.classpath" debug="true" debuglevel="lines,source" includeAntRuntime="false">
			<include name="**/*.java"/>
		      <classpath>
				<fileset file="${download.dir}/codechickenlib.jar"/>
				<fileset file="${download.dir}/CoFHLib.jar"/>
		      </classpath>
		</javac>
		<jar destfile="${download.dir}/CoFHCore.jar" compress="true" level="9" basedir="${compile.dir}"/>
		<delete dir="${compile.dir}" failonerror="false"/>
		<!-- End hack -->
		<!--
		<echo message="Downloading Forestry API... "/>
		<get src="http://forestry.sengir.net/files/forestry/releases/2.3.0.1/forestry-api-2.3.0.1.zip" dest="${download.dir}/ForestryAPI.zip"/>
		-->
	</target>

	<target name="extract-dependencies" depends="setup-forge,get-dependencies" unless="have.libs">
		<delete dir="${lib.dir}/"/>
		<mkdir dir="${lib.dir}/"/>
			
		<echo message="Extracting CCL... "/>
		<move file="${download.dir}/codechickenlib.jar" todir="${lib.dir}/"/>

		<echo message="Extracting CoFHLib..."/>
		<copy file="${download.dir}/CoFHLib.jar" todir="${lib.dir}"/>
		
		<echo message="Extracting CoFHCore..."/>
		<copy file="${download.dir}/CoFHCore.jar" todir="${lib.dir}"/>
		
		<echo message="Extracting BuildCraft API..."/>
		<copy file="${download.dir}/Buildcraft.jar" todir="${lib.dir}"/>
		
		<echo message="Extracting IC2 API... "/>
		<copy file="${download.dir}/industrialcraft-2-api.jar" todir="${lib.dir}"/><!--
		
		<echo message="Extracting Forestry API... "/>
		<unzip src="${download.dir}/ForestryAPI.zip" dest="${download.dir}"/>
		<move file="${download.dir}/forestry" todir="${sources.dir}"/>-->
	</target>
	
	<macrodef name="move-transformers"><sequential>
		
		<copy file="${download.dir}/CoFHCore-master/src/main/resources/CoFH_at.cfg" todir="${transformers.dir}"/>
		
	</sequential></macrodef>
	
	<!-- Building process -->
	<target name="install" depends="build">
		<move file="${reobf.jar}" tofile="${dist.dir}/${build.name}${build.full}${build.number}.jar"/>
		
		<!-- Cleanup -->
		<delete dir="${apiclasses.dir}"/>
		<delete dir="${classes.dir}"/>
		<delete>
			<fileset dir="${dist.dir}">
				<exclude name="${build.name}${build.full}${build.number}.jar"/>
				<exclude name="${build.name}${build.full}dev-${build.number}.jar"/>
				<exclude name="${build.name}-API${build.full}${build.number}.zip"/>
			</fileset>
		</delete>
	</target>

	<macrodef name="install-lite">
		<attribute name="build"/>
		<attribute name="classes" default="${compile.dir}"/>
		<sequential>
			<copy todir="${classes.dir}" preservelastmodified="true">
				<fileset dir="@{classes}">
					<include name="**/*.class"/>
				</fileset>
				<fileset dir="${resources.dir}"/>
			</copy>
			<update-languages/>
			<jar destfile="${dist.dir}/${build.name}${build.full}@{build}.jar"
				compress="true" level="9" basedir="${classes.dir}"/>
		</sequential>
	</macrodef>

	<target name="build" depends="extract-dependencies,get-build-number,copy-sources" unless="already.compiled">
		<!-- Recompile -->
		<mkdir dir="${compile.dir}"/>
		
		<depend srcdir="${sources.dir}" destdir="${compile.dir}"
			cache="${forgebuild.dir}/tmp/depcache" closure="true">
			<include name="${class.pckg}/**/*.java"/>
		</depend>
		<javac srcdir="${sources.dir}" destdir="${compile.dir}" target="1.6" source="1.6"
			classpathref="mcp.classpath" debug="true" debuglevel="lines,source" includeAntRuntime="false">
			<include name="${class.pckg}/**/*.java"/>
		</javac>
		
		<!-- Dev jar -->
		<local name="build"/><property name="build" value="dev-${build.number}"/>
		<install-lite build="${build}"/>

		<!-- Reobf -->
		<copy file="${dist.dir}/${build.name}${build.full}${build}.jar" tofile="${reobf.jar}"/>
		<exec executable="./gradlew" failonerror="true" dir="${forge.dir}/" vmlauncher="false">
			<arg line="-g ../.gradle"/>
			<arg line="reobf"/>
			<arg line="-x compileJava"/>
			<arg line="-x jar"/>
		</exec>
	</target>

	<target name="copy-sources" depends="package-api" unless="already.compiled">
		<!-- Copy source -->
		<mkdir dir="${sources.dir}"/>
		<sync todir="${sources.dir}">
			<fileset dir="${src.dir}"/>
		</sync>
	</target>

	<target name="package-api" depends="get-version" unless="already.compiled" if="has.api">
		<!-- Copy & package API -->
		<copy todir="${apiclasses.dir}/${class.pckg}/api">
			<fileset dir="${src.dir}/${class.pckg}/api"/>
		</copy>
		<zip destfile="${dist.dir}/${build.name}-API${build.full}${build.number}.zip" basedir="${apiclasses.dir}"/>
	</target>

	<target name="setup-forge" depends="download-forge" unless="forge.already.installed">
		<delete dir="${forge.dir}" failonerror="false"/>
		<mkdir dir="${forge.dir}"/>
		<unzip dest="${forge.dir}">
			<fileset dir="${download.dir}">
				<include name="forge-${forge.version}-src.zip"/>
			</fileset>
		</unzip>
		
		<!-- Cleanup -->
		<delete>
			<fileset dir="${forge.dir}">
				<include name="*.txt"/>
				<include name="src/**/*.info"/>
			</fileset>
		</delete>
		<delete dir="${forge.dir}/eclipse" failonerror="false"/>
		<delete dir="${forge.dir}/src/main/java" failonerror="false"/>
		<delete dir="${build.dir}/.gradle/caches/minecraft/net/minecraftforge/forge/${forge.version}/srgs" failonerror="false"/>
		
		<!-- Change executables' permissions -->
		<chmod file="${forge.dir}/gradlew" perm="+x"/>

		<move-transformers/>

		<!-- Install forge -->
		<exec executable="./gradlew" failonerror="true" dir="${forge.dir}/" vmlauncher="false">
			<arg line="-g ../.gradle"/>
			<arg line="extractMinecraftSrc"/>
			<arg line="eclipseClasspath"/>
		</exec>

		<mkdir dir="${compile.dir}"/>
		<mkdir dir="${lib.dir}"/>
		<javac srcdir="${forge.dir}/build/tmp/recompSrc" destdir="${compile.dir}" target="1.6" source="1.6"
			classpathref="mcp.classpath" debug="true" debuglevel="lines,source" includeAntRuntime="false"/>
		<jar destfile="${forge.jar}" compress="true" level="9" basedir="${compile.dir}"/>
		<copy file="${forge.jar}" todir="${forgebuild.dir}/dirtyArtifacts/"/>
		<delete dir="${compile.dir}"/>
	</target>

	<target name="download-forge" depends="download-core" unless="forge.exists">
		<echo message="Downloading forge... "/>
		<get src="${forge.url}" dest="${download.dir}/forge-${forge.version}-src.zip"/>
	</target>
	
	<macrodef name="update-languages">
		<sequential>
			<script language="javascript"><![CDATA[
				importPackage(java.io);
				var path = "/assets/" + project.getProperty("build.name").toLowerCase() + "/language/";
				var languages = new File(project.getProperty("resources.dir") + path);
				if (languages.exists() && languages.isDirectory()) {
					var out = "";
					for each(var i in languages.list()) {
						if (i != null && i.length() > 5 && i.indexOf(".lang") == i.length() - 5) {
							out += i.substring(0, i.length() - 5) + ", ";
						}
					}
					if (out.length > 0) {
						var os = new PrintWriter(project.getProperty("classes.dir") + path + ".languages");
						os.write(out.substring(0, out.length - 2));
						os.flush();
						os.close();
					}
				}
			]]></script>
		</sequential>
	</macrodef>
	
	<target name="verify-version">
		<script language="javascript"><![CDATA[
			var name = project.getProperty("build.full");
			if (name == null || name == "") {
				name = project.getProperty("verclass.name");
				if (name == null || name == "") {
					project.setProperty("build.full", "-");
				}
			}
		]]></script>
	</target>

	<target name="get-version" depends="verify-version,setup-forge" unless="build.full">
		<local name="grep.out"/><local name="mfrv"/><local name="mcv"/>
		<!-- Read version out of file -->
		<script language="javascript"><![CDATA[
			importClass(java.io.File);
			importClass(java.util.Scanner);
			
			var mainClass = new File(project.getProperty("verclass.dir"), project.getProperty("verclass.name"));
			mainClass = new Scanner(mainClass, "UTF-8").useDelimiter("\\Z");
			var text = mainClass.next();
			mainClass.close();
			
			var matches = /[0-9.]+R[0-9.]+((RC|B)[0-9]+)?/.exec(text);
			
			project.setProperty("grep.out", matches[0]);
		]]></script>
		
		<!-- Split mod&mc version, update mcmod -->
		<script language="javascript" classpathref="gson"><![CDATA[
			importPackage(Packages.com.google.gson);
			importPackage(Packages.com.google.gson.stream);
			importPackage(java.io);
			importClass(java.util.Scanner);
			
			versionlist = project.getProperty("grep.out").split('R');

			mcversion = versionlist[0];
			mfrversion = versionlist[1];
			if (versionlist.length > 2)
				mfrversion = versionlist[1]+"R"+versionlist[2];
			
			project.setProperty("mfrv", mfrversion);
			project.setProperty("mcv", mcversion);
			
			var c = project.getProperty("build.channel");
			if (c == null || c == "")
				project.setProperty("build.channel", mfrversion.indexOf("B") > 0 ? "alpha" : (
													 mfrversion.indexOf("RC") > 0 ? "beta" : "release"));
			
			// open file and parse JSON structure
			var file = new File(project.getProperty("resources.dir") + "/mcmod.info");
			if (file.exists())
			{
				var mcmod = new Scanner(file, "UTF-8").useDelimiter("\\Z");
				var data = new JsonParser().parse(mcmod.next()).getAsJsonArray();
				mcmod.close();
				
				// update all version elements
				for (var i = 0, e = data.size(); i < e; ++i) {
					var element = data.get(i).getAsJsonObject();
					element.addProperty("version", mfrversion);
					element.addProperty("mcversion", mcversion);
				}
				
				// write file back, pretty-printed
				var output = new JsonWriter(new FileWriter(file));
				output.setIndent("    ");
				new Gson().toJson(data, output);
				output.close();
			}
		]]></script>
		<echo message="Version: ${mfrv}  Channel: ${build.channel}"/>
		<property name="build.full" value="-[${mcv}]${mfrv}-"/>
	</target>

	<target name="get-build-number" depends="build-number-there" unless="build.number">
		<echo message="!! No build number set !!"/>
		<property name="build.number" value="CUSTOM_BUILD"/>
	</target>

	<target name="build-number-there" depends="get-version" if="env.BUILD_NUMBER" unless="build.number">
		<echo message="Using build number ${env.BUILD_NUMBER}..."/>
		<property name="build.number" value="${env.BUILD_NUMBER}"/>
	</target>

	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>

	<target name="rebuild">
		<delete file="${forge.jar}"/>
		<antcall target="install"/>
	</target>

	<target name="jar" depends="install"/>
</project>